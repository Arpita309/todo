{"version":3,"sources":["TodoContext.js","components/navbar.js","components/todo.js","components/todolist.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","TodoProvider","props","useState","Date","now","todos","setTodos","Provider","value","children","Navbar","useContext","menu","setMenu","setValue","className","role","onClick","aria-label","aria-expanded","data-target","aria-hidden","onSubmit","e","preventDefault","type","onChange","target","Todo","todo","done","toggleDone","bind","this","deleteTodo","TodoList","map","_todo","_todos","filter","length","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54adedcd.chunk.js","sourcesContent":["import React, {createContext, useState} from 'react';\r\nexport const TodoContext = createContext();\r\nexport const TodoProvider = (props) => {\r\n    const [todos, setTodos] = useState([\r\n      {\r\n        \"id\": Date.now(),\r\n        \"value\": \"learn react\",\r\n        \"done\": false\r\n      },\r\n      {\r\n        \"id\": Date.now() + 1,\r\n        \"value\": \"Complete site deployment\",\r\n        \"done\": false  \r\n      }\r\n    ]);\r\n  \r\n    return (\r\n      <TodoContext.Provider value={[todos, setTodos]}>\r\n        {props.children}\r\n      </TodoContext.Provider>\r\n    )\r\n  }","import React, { useState, useContext } from 'react'\r\n\r\nimport { TodoContext } from \"../TodoContext\";\r\n\r\nexport default function Navbar() {\r\n  const [todos, setTodos] = useContext(TodoContext)\r\n  const [menu, setMenu] = useState(false)\r\n  const [value, setValue] = useState(\"\") \r\n\r\n  const addTodo = (e) => {\r\n    e.preventDefault()\r\n    setTodos([...todos, {\r\n      \"id\": Date.now(),\r\n      \"value\": value, \r\n      \"done\": false\r\n    }])\r\n    setValue(\"\") \r\n  }\r\n  return (\r\n    <div className=\"navbar has-shadow\">\r\n      <div className=\"navbar-brand\">\r\n        <div className=\"navbar-item\">\r\n          <p className=\"title\">Easy Todo</p>\r\n        </div>\r\n\r\n        <a role=\"button\" onClick={() => setMenu(!menu)} className={`navbar-burger burger ${menu ? \"is-active\" : \"\"}`} aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\r\n          <span aria-hidden=\"true\"></span>\r\n          <span aria-hidden=\"true\"></span>\r\n          <span aria-hidden=\"true\"></span>\r\n        </a>\r\n      </div>\r\n\r\n      <div className={`navbar-menu ${menu ? \"is-active\" : \"\"}`}>\r\n        <div className=\"navbar-end\">\r\n          <div className=\"navbar-item\">\r\n            <div className=\"field has-addons\">\r\n            <form onSubmit={addTodo} className=\"field has-addons\">\r\n        <p className=\"control is-expanded\">\r\n          <input value={value} type=\"text\" onChange={(e) => setValue(e.target.value)} className=\"input\" />\r\n        </p>\r\n        <p className=\"control\">\r\n          <button className=\"button is-info has-text-weight-bold\">\r\n            Add Todo\r\n          </button>\r\n        </p>\r\n      </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport default function Todo(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-content\">\r\n        <div className=\"level\">\r\n          <div className=\"level-left\">\r\n            <div className=\"level-item\">\r\n              <p className={`title ${props.todo.done ? \"has-text-grey-light\" : \"\"}`}>{props.todo.value}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"level-right\">\r\n            <div className=\"level-item buttons\">\r\n              <button onClick={props.toggleDone.bind(this, props.todo)} className={`button has-text-weight-bold ${props.todo.done ? \"is-warning\" : \"is-primary\"}`}>{props.todo.done ? \"Undo\" : \"Done\"}</button>\r\n              <button onClick={props.deleteTodo.bind(this, props.todo)} className=\"button is-danger has-text-weight-bold\">Delete</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, {useContext} from 'react'\r\n\r\nimport { TodoContext } from \"../TodoContext\";\r\n\r\nimport Todo from \"./todo\";\r\n\r\nexport default function TodoList() {\r\n  const [todos, setTodos] = useContext(TodoContext);\r\n\r\n  // toggleDone\r\n  const toggleDone = (todo) => {\r\n    todos.map(_todo => _todo === todo ? _todo.done = !todo.done : todo)\r\n    setTodos([...todos])\r\n  } \r\n  // delete\r\n  const deleteTodo = (todo) => {\r\n    const _todos = todos.filter(_todo => _todo !== todo)\r\n    setTodos(_todos)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"hero is-info\">\r\n        <div className=\"hero-body has-text-centered\">\r\n          <p className=\"title is-1\">{todos.length} Todos</p>\r\n        </div>\r\n      </div>\r\n\r\n      <section className=\"section\">\r\n        <div className=\"container\">\r\n          {todos.map(todo => (\r\n            <Todo key={todo.id} todo={todo} toggleDone={toggleDone} deleteTodo={deleteTodo}/>\r\n          ))}\r\n        </div>\r\n      </section>\r\n    </div>\r\n  )\r\n}","import React from 'react';\n\nimport { TodoProvider } from \"./TodoContext\";\n\nimport Navbar from \"./components/navbar\";\nimport TodoList from \"./components/todolist\";\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <Navbar/>\n      <TodoList/>\n    </TodoProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"../node_modules/bulma/bulma.sass\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}